library(dplyr)
library(dplyr)
library(ggplot2)
data("diamonds")
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
coord_cartesian(xlim = c(0, quantile(carat) <= 0.99), ylim = c(0, quantile(price) <= 0.99)
ggplot(diamonds, aes(x = carat, y = price)) +
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
coord_cartesian(xlim = c(0, quantile(carat, 0.99)), ylim = c(0, quantile(price, 0.99))
ggplot(diamonds, aes(x = carat, y = price)) +
ggplot(subset(diamonds, quantile(carat) <= 0.99 & quantile(price) <= 0.99),
aes(x = carat, y = price)) +
geom_point()
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point()
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point() +
xlim(0,quantile(carat, 0.99))
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point() +
xlim(0,quantile(diamonds$carat, 0.99))
ggplot(diamonds,
aes(x = carat, y = price)) +
geom_point() +
xlim(0,quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, 0.99))
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
ggpairs(diamond_samp, wrap = c(shape = I('.'), outlier.shape = I('.')))
library(gridExtra)
grid.arrange(plot1, plot2, cols = 2)
plot1 <- qplot() +
ggtitle('Price')
plot2 <- qplot() + coord_trans(y = "log10")
plot2 <- qplot() + coord_trans(y = "log10") +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, cols = 2)
grid.arrange(plot1, plot2, columnss = 2)
grid.arrange(plot1, plot2, columns = 2)
grid.arrange(plot1, plot2)
plot2 <- qplot(data = diamonds, aes(x = carat, y = price) + coord_trans(y = "log10") + geom_point() +
ggtitle('Price (log10)')
plot1 <- qplot(data = diamonds, aes(x = carat, y = price)) + geom_point() +
plot1 <- qplot(data = diamonds, aes(x = carat, y = price)) + geom_point() +
ggtitle('Price')
plot2 <- qplot(data = diamonds, aes(x = carat, y = price) + coord_trans(y = "log10") + geom_point() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
plot2 <- qplot(data = diamonds, aes(x = carat, y = price) + coord_trans(y = "log10") + geom_point() +
ggtitle('Price (log10)')
plot2 <- qplot(data = diamonds, aes(x = carat, y = price) + coord_trans(y = "log10") +
plot1 <- qplot(data = diamonds, aes(x = carat, y = price)) + geom_point() +
ggtitle('Price')
qplot(data = diamonds, aes(x = carat, y = price)) + geom_point() +
ggtitle('Price')
plot1 <- qplot(data = diamonds, x = carat, y = price) + geom_point() +
ggtitle('Price')
plot2 <- qplot(data = diamonds, x = carat, y = price) + coord_trans(y = "log10") +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2)
grid.arrange(plot1, plot2, cols = 2)
grid.arrange(plot1, plot2, columns = 2)
grid.arrange(plot1, plot2, ncol = 2)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_jitter(alpha = 0.5, size = 3/4) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 0.5, size = 3/4, position = "jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, color = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
install.package('bitops')
install.package('bitops')
install.packages('RCurl')
install.packages('bitops')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
load("BigDiamonds.rda")
View(diamondsbig)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(modelEstimate)
