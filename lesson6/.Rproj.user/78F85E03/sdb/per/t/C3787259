{
    "collab_server" : "",
    "contents" : "Lesson 6\n========================================================\n\n### Welcome\nNotes:\n\n***\n\n### Scatterplot Review\n\n```{r Scatterplot Review}\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndata(\"diamonds\")\n\nggplot(diamonds, aes(x = carat, y = price)) +\n  geom_point() +\n  xlim(0,quantile(diamonds$carat, 0.99)) +\n  ylim(0, quantile(diamonds$price, 0.99))\n\n```\n\n***\n\n### Price and Carat Relationship\nResponse:\n\n***\n\n### Frances Gerety\nNotes:\n\n#### A diamonds is\n\n\n***\n\n### The Rise of Diamonds\nNotes:\n\n***\n\n### ggpairs Function\nNotes:\n\n```{r ggpairs Function}\n# install these if necessary\ninstall.packages('GGally')\ninstall.packages('scales')\ninstall.packages('memisc')\ninstall.packages('lattice')\ninstall.packages('MASS')\ninstall.packages('car')\ninstall.packages('reshape')\ninstall.packages('plyr')\n\n# load the ggplot graphics package and the others\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(scales)\nlibrary(memisc)\n\n# sample 10,000 diamonds from the data set\nset.seed(20022012)\ndiamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]\nggpairs(diamond_samp, wrap = c(shape = I('.'), outlier.shape = I('.')))\n```\n\nWhat are some things you notice in the ggpairs output?\nResponse:\n\n***\n\n### The Demand of Diamonds\nNotes:\n\n```{r The Demand of Diamonds}\n\nlibrary(gridExtra)\n\nplot1 <- qplot(data = diamonds, x = carat, y = price) + geom_point() +\n  ggtitle('Price')\n\nplot2 <- qplot(data = diamonds, x = carat, y = price) + coord_trans(y = \"log10\") +\n  ggtitle('Price (log10)')\n\ngrid.arrange(plot1, plot2, ncol = 2)\n\n```\n\n***\n\n### Connecting Demand and Price Distributions\nNotes:\n\n***\n\n### Scatterplot Transformation\n\n```{r Scatterplot Transformation}\n\n```\n\n\n### Create a new function to transform the carat variable\n\n```{r cuberoot transformation}\ncuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),\n                                      inverse = function(x) x^3)\n```\n\n#### Use the cuberoot_trans function\n```{r Use cuberoot_trans}\nggplot(aes(carat, price), data = diamonds) + \n  geom_point() + \n  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),\n                     breaks = c(0.2, 0.5, 1, 2, 3)) + \n  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),\n                     breaks = c(350, 1000, 5000, 10000, 15000)) +\n  ggtitle('Price (log10) by Cube-Root of Carat')\n```\n\n***\n\n### Overplotting Revisited\n\n```{r Sort and Head Tables}\n\n```\n\n\n```{r Overplotting Revisited}\nggplot(aes(carat, price), data = diamonds) + \n  geom_point(alpha = 0.5, size = 3/4, position = \"jitter\") + \n  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),\n                     breaks = c(0.2, 0.5, 1, 2, 3)) + \n  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),\n                     breaks = c(350, 1000, 5000, 10000, 15000)) +\n  ggtitle('Price (log10) by Cube-Root of Carat')\n```\n\n***\n\n### Other Qualitative Factors\nNotes:\n\n***\n\n### Price vs. Carat and Clarity\n\nAlter the code below.\n```{r Price vs. Carat and Clarity}\n# install and load the RColorBrewer package\ninstall.packages('RColorBrewer')\nlibrary(RColorBrewer)\n\nggplot(aes(x = carat, y = price, color = clarity), data = diamonds) + \n  geom_point(alpha = 0.5, size = 1, position = 'jitter') +\n  scale_color_brewer(type = 'div',\n    guide = guide_legend(title = 'Clarity', reverse = T,\n    override.aes = list(alpha = 1, size = 2))) +  \n  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),\n    breaks = c(0.2, 0.5, 1, 2, 3)) + \n  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),\n    breaks = c(350, 1000, 5000, 10000, 15000)) +\n  ggtitle('Price (log10) by Cube-Root of Carat and Clarity')\n```\n\n***\n\n### Clarity and Price\nResponse:\n\n***\n\n### Price vs. Carat and Cut\n\nAlter the code below.\n```{r Price vs. Carat and Cut}\nggplot(aes(x = carat, y = price, color = clarity), data = diamonds) + \n  geom_point(alpha = 0.5, size = 1, position = 'jitter') +\n  scale_color_brewer(type = 'div',\n                     guide = guide_legend(title = 'Clarity', reverse = T,\n                                          override.aes = list(alpha = 1, size = 2))) +  \n  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),\n                     breaks = c(0.2, 0.5, 1, 2, 3)) + \n  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),\n                     breaks = c(350, 1000, 5000, 10000, 15000)) +\n  ggtitle('Price (log10) by Cube-Root of Carat and Clarity')\n```\n\n***\n\n### Cut and Price\nResponse:\n\n***\n\n### Price vs. Carat and Color\n\nAlter the code below.\n```{r Price vs. Carat and Color}\nggplot(aes(x = carat, y = price, color = cut), data = diamonds) + \n  geom_point(alpha = 0.5, size = 1, position = 'jitter') +\n  scale_color_brewer(type = 'div',\n                     guide = guide_legend(title = Cut, reverse = T,\n                                          override.aes = list(alpha = 1, size = 2))) +  \n  scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),\n                     breaks = c(0.2, 0.5, 1, 2, 3)) + \n  scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),\n                     breaks = c(350, 1000, 5000, 10000, 15000)) +\n  ggtitle('Price (log10) by Cube-Root of Carat and Cut')\n```\n\n***\n\n### Color and Price\nResponse:\n\n***\n\n### Linear Models in R\nNotes:\n\nResponse:\n\n***\n\n### Building the Linear Model\nNotes:\n\n```{r Building the Linear Model}\nm1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)\nm2 <- update(m1, ~ . + carat)\nm3 <- update(m2, ~ . + cut)\nm4 <- update(m3, ~ . + color)\nm5 <- update(m4, ~ . + clarity)\nmtable(m1, m2, m3, m4, m5)\n```\n\nNotice how adding cut to our model does not help explain much of the variance\nin the price of diamonds. This fits with out exploration earlier.\n\n***\n\n### Model Problems\nVideo Notes:\n\nResearch:\n(Take some time to come up with 2-4 problems for the model)\n(You should 10-20 min on this)\n\nResponse:\n\n***\n\n### A Bigger, Better Data Set\nNotes:\n\n```{r A Bigger, Better Data Set}\ninstall.packages('bitops')\ninstall.packages('RCurl')\nlibrary('bitops')\nlibrary('RCurl')\n\ndiamondsurl = getBinaryURL(\"https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda\")\nload(rawConnection(diamondsurl))\nload(\"BigDiamonds.rda\")\n```\n\nThe code used to obtain the data is available here:\nhttps://github.com/solomonm/diamonds-data\n\n## Building a Model Using the Big Diamonds Data Set\nNotes:\n\n```{r Building a Model Using the Big Diamonds Data Set}\nm1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)\nm2 <- update(m1, ~ . + carat)\nm3 <- update(m2, ~ . + cut)\nm4 <- update(m3, ~ . + color)\nm5 <- update(m4, ~ . + clarity)\nmtable(m1, m2, m3, m4, m5)\n\n\n```\n\n\n***\n\n## Predictions\n\nExample Diamond from BlueNile:\nRound 1.00 Very Good I VS1 $5,601\n\n```{r}\n#Be sure youâ€™ve loaded the library memisc and have m5 saved as an object in your workspace.\nthisDiamond = data.frame(carat = 1.00, cut = \"V.Good\",\n                         color = \"I\", clarity=\"VS1\")\nmodelEstimate = predict(m5, newdata = thisDiamond,\n                        interval=\"prediction\", level = .95)\n```\n\nEvaluate how well the model predicts the BlueNile diamond's price. Think about the fitted point estimate as well as the 95% CI.\n\n***\n\n## Final Thoughts\nNotes:\n\n***\n\nClick **KnitHTML** to see all of your hard work and to have an html\npage of this lesson, your answers, and your notes!\n\n",
    "created" : 1487945923575.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2642592581",
    "id" : "C3787259",
    "lastKnownWriteTime" : 1487976417,
    "last_content_update" : 1487976417323,
    "path" : "~/Desktop/udacity_r/lesson6/lesson6_student.rmd",
    "project_path" : "lesson6_student.rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}